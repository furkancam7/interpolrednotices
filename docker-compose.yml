version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: interpol_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - interpol_network

  # RabbitMQ Message Queue
  rabbitmq:
    build:
      context: ./Container_C
      dockerfile: Dockerfile
    container_name: interpol_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - interpol_network

  # Container A: Interpol Data Scraper
  scraper:
    build:
      context: ./Container_A
      dockerfile: Dockerfile
    container_name: interpol_scraper
    environment:
      # RabbitMQ Configuration
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      QUEUE_NAME: ${QUEUE_NAME}
      # Scraping Configuration
      SCRAPING_INTERVAL: ${SCRAPING_INTERVAL}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - interpol_network

  # Container B: Web Application
  webapp:
    build:
      context: ./Container_B
      dockerfile: Dockerfile
    container_name: interpol_webapp
    environment:
      # Database Configuration
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      # RabbitMQ Configuration
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      QUEUE_NAME: ${QUEUE_NAME}
      # Web Application Configuration
      PORT: ${PORT}
      FLASK_DEBUG: ${FLASK_DEBUG}
      SECRET_KEY: ${SECRET_KEY}
    ports:
      - "8080:5000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - interpol_network

  # Consumer Service (separate from webapp)
  consumer:
    build:
      context: ./Container_B
      dockerfile: Dockerfile
    container_name: interpol_consumer
    environment:
      # Database Configuration
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      # RabbitMQ Configuration
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      QUEUE_NAME: ${QUEUE_NAME}
    command: ["python", "consumer_db.py"]
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - interpol_network

volumes:
  postgres_data:

networks:
  interpol_network:
    driver: bridge